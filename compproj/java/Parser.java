
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\007\005\000\002\007" +
    "\004\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\007\000\002\010\003\000" +
    "\002\010\004\000\002\010\004\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\010\000\002\010\004\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\010\000\002\010\007\000\002\010" +
    "\004\000\002\010\003\000\002\010\012\000\002\010\011" +
    "\000\002\010\005\000\002\010\005\000\002\010\003\000" +
    "\002\006\006\000\002\004\004\000\002\004\003\000\002" +
    "\003\004\000\002\003\003\000\002\002\005\000\002\002" +
    "\005\000\002\005\005\000\002\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\032\003\014\004\011\005\005\006\022\007" +
    "\010\010\016\011\004\013\007\026\013\031\020\035\015" +
    "\041\021\001\002\000\032\003\014\004\011\005\005\006" +
    "\022\007\010\010\016\011\004\013\007\026\013\031\020" +
    "\035\015\041\021\001\002\000\066\002\ufffd\004\ufffd\005" +
    "\ufffd\006\ufffd\007\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023" +
    "\ufffd\024\ufffd\025\ufffd\027\ufffd\030\ufffd\032\ufffd\034\ufffd" +
    "\036\ufffd\040\ufffd\041\ufffd\042\ufffd\001\002\000\064\002" +
    "\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\027\uffe4\030\uffe4" +
    "\032\uffe4\034\146\040\uffe4\041\uffe4\042\uffe4\001\002\000" +
    "\032\003\014\004\011\005\005\006\022\007\010\010\016" +
    "\011\004\013\007\026\013\031\020\035\015\041\021\001" +
    "\002\000\066\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb" +
    "\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017" +
    "\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb" +
    "\027\ufffb\030\ufffb\032\ufffb\034\ufffb\036\ufffb\040\ufffb\041" +
    "\ufffb\042\ufffb\001\002\000\066\002\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015" +
    "\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe" +
    "\024\ufffe\025\ufffe\027\ufffe\030\ufffe\032\ufffe\034\ufffe\036" +
    "\ufffe\040\ufffe\041\ufffe\042\ufffe\001\002\000\054\002\144" +
    "\004\011\005\005\006\022\007\010\011\043\012\027\013" +
    "\045\014\036\015\025\016\035\017\041\020\032\021\037" +
    "\022\030\023\033\024\046\025\034\034\040\040\026\041" +
    "\021\001\002\000\032\003\014\004\011\005\005\006\022" +
    "\007\010\010\016\011\004\013\007\026\013\031\020\035" +
    "\015\041\021\001\002\000\064\002\uffdf\004\uffdf\005\uffdf" +
    "\006\uffdf\007\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\027\uffdf\030\uffdf\032\uffdf\034\uffdf\040" +
    "\uffdf\041\uffdf\042\uffdf\001\002\000\014\004\011\005\005" +
    "\006\022\007\010\041\021\001\002\000\032\003\014\004" +
    "\011\005\005\006\022\007\010\010\016\011\004\013\007" +
    "\026\013\031\020\035\015\041\021\001\002\000\066\002" +
    "\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\011\ufff9\012\ufff9" +
    "\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021" +
    "\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\027\ufff9\030\ufff9" +
    "\032\ufff9\034\ufff9\036\126\040\ufff9\041\ufff9\042\ufff9\001" +
    "\002\000\010\007\074\033\073\041\075\001\002\000\034" +
    "\003\014\004\011\005\005\006\022\007\010\010\016\011" +
    "\004\013\007\026\013\031\020\035\015\041\021\042\024" +
    "\001\002\000\066\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007" +
    "\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc" +
    "\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025" +
    "\ufffc\027\ufffc\030\ufffc\032\ufffc\034\ufffc\036\ufffc\040\ufffc" +
    "\041\ufffc\042\ufffc\001\002\000\054\004\011\005\005\006" +
    "\022\007\010\011\043\012\027\013\045\014\036\015\025" +
    "\016\035\017\041\020\032\021\037\022\030\023\033\024" +
    "\046\025\034\034\040\040\026\041\021\042\031\001\002" +
    "\000\066\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff\011" +
    "\uffff\012\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff" +
    "\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025\uffff\027" +
    "\uffff\030\uffff\032\uffff\034\uffff\036\uffff\040\uffff\041\uffff" +
    "\042\uffff\001\002\000\032\003\014\004\011\005\005\006" +
    "\022\007\010\010\016\011\004\013\007\026\013\031\020" +
    "\035\015\041\021\001\002\000\032\003\014\004\011\005" +
    "\005\006\022\007\010\010\016\011\004\013\007\026\013" +
    "\031\020\035\015\041\021\001\002\000\032\003\014\004" +
    "\011\005\005\006\022\007\010\010\016\011\004\013\007" +
    "\026\013\031\020\035\015\041\021\001\002\000\032\003" +
    "\014\004\011\005\005\006\022\007\010\010\016\011\004" +
    "\013\007\026\013\031\020\035\015\041\021\001\002\000" +
    "\066\002\000\004\000\005\000\006\000\007\000\011\000" +
    "\012\000\013\000\014\000\015\000\016\000\017\000\020" +
    "\000\021\000\022\000\023\000\024\000\025\000\027\000" +
    "\030\000\032\000\034\000\036\000\040\000\041\000\042" +
    "\000\001\002\000\032\003\014\004\011\005\005\006\022" +
    "\007\010\010\016\011\004\013\007\026\013\031\020\035" +
    "\015\041\021\001\002\000\032\003\014\004\011\005\005" +
    "\006\022\007\010\010\016\011\004\013\007\026\013\031" +
    "\020\035\015\041\021\001\002\000\032\003\014\004\011" +
    "\005\005\006\022\007\010\010\016\011\004\013\007\026" +
    "\013\031\020\035\015\041\021\001\002\000\032\003\014" +
    "\004\011\005\005\006\022\007\010\010\016\011\004\013" +
    "\007\026\013\031\020\035\015\041\021\001\002\000\032" +
    "\003\014\004\011\005\005\006\022\007\010\010\016\011" +
    "\004\013\007\026\013\031\020\035\015\041\021\001\002" +
    "\000\032\003\014\004\011\005\005\006\022\007\010\010" +
    "\016\011\004\013\007\026\013\031\020\035\015\041\021" +
    "\001\002\000\032\003\014\004\011\005\005\006\022\007" +
    "\010\010\016\011\004\013\007\026\013\031\020\035\015" +
    "\041\021\001\002\000\032\003\014\004\011\005\005\006" +
    "\022\007\010\010\016\011\004\013\007\026\013\031\020" +
    "\035\015\041\021\001\002\000\064\002\uffe5\004\uffe5\005" +
    "\005\006\022\007\010\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\027\uffe5\030\uffe5\032\uffe5\034\uffe5" +
    "\040\uffe5\041\021\042\uffe5\001\002\000\032\003\014\004" +
    "\011\005\005\006\022\007\010\010\016\011\004\013\007" +
    "\026\013\031\020\035\015\041\021\001\002\000\066\002" +
    "\uffda\004\uffda\005\uffda\006\uffda\007\uffda\011\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\023\uffda\024\uffda\025\uffda\027\uffda\030\uffda" +
    "\032\uffda\034\uffda\036\051\040\uffda\041\uffda\042\uffda\001" +
    "\002\000\032\003\014\004\011\005\005\006\022\007\010" +
    "\010\016\011\004\013\007\026\013\031\020\035\015\041" +
    "\021\001\002\000\032\003\014\004\011\005\005\006\022" +
    "\007\010\010\016\011\004\013\007\026\013\031\020\035" +
    "\015\041\021\001\002\000\064\002\ufff2\004\ufff2\005\005" +
    "\006\022\007\010\011\043\012\027\013\045\014\036\015" +
    "\025\016\035\017\041\020\ufff2\021\ufff2\022\ufff2\023\ufff2" +
    "\024\ufff2\025\ufff2\027\ufff2\030\ufff2\032\ufff2\034\ufff2\040" +
    "\ufff2\041\021\042\ufff2\001\002\000\064\002\uffeb\004\uffeb" +
    "\005\005\006\022\007\010\011\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\015\025\016\035\017\041\020\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\025\uffeb\027\uffeb\030\uffeb\032\uffeb\034" +
    "\uffeb\040\uffeb\041\021\042\uffeb\001\002\000\004\041\052" +
    "\001\002\000\032\003\014\004\011\005\005\006\022\007" +
    "\010\010\016\011\004\013\007\026\013\031\020\035\015" +
    "\041\021\001\002\000\054\004\011\005\005\006\022\007" +
    "\010\011\043\012\027\013\045\014\036\015\025\016\035" +
    "\017\041\020\032\021\037\022\030\023\033\024\046\025" +
    "\034\034\040\040\026\041\021\042\054\001\002\000\066" +
    "\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa" +
    "\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\027\ufffa\030" +
    "\ufffa\032\ufffa\034\ufffa\036\ufffa\040\ufffa\041\ufffa\042\ufffa" +
    "\001\002\000\064\002\ufff5\004\ufff5\005\005\006\022\007" +
    "\010\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\025\016\035" +
    "\017\041\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025" +
    "\ufff5\027\ufff5\030\ufff5\032\ufff5\034\ufff5\040\ufff5\041\021" +
    "\042\ufff5\001\002\000\066\002\uffdb\004\uffdb\005\uffdb\006" +
    "\uffdb\007\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\027\uffdb\030\uffdb\032\uffdb\034\uffdb\036\051" +
    "\040\uffdb\041\uffdb\042\uffdb\001\002\000\064\002\uffe8\004" +
    "\uffe8\005\005\006\022\007\010\011\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\027\uffe8\030\uffe8\032\uffe8" +
    "\034\uffe8\040\uffe8\041\021\042\uffe8\001\002\000\064\002" +
    "\uffd8\004\uffd8\005\005\006\022\007\010\011\043\012\027" +
    "\013\045\014\036\015\025\016\035\017\041\020\032\021" +
    "\037\022\030\023\033\024\046\025\034\027\uffd8\030\uffd8" +
    "\032\uffd8\034\uffd8\040\uffd8\041\021\042\uffd8\001\002\000" +
    "\064\002\ufff3\004\ufff3\005\005\006\022\007\010\011\043" +
    "\012\027\013\045\014\036\015\025\016\035\017\041\020" +
    "\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\027\ufff3" +
    "\030\ufff3\032\ufff3\034\ufff3\040\ufff3\041\021\042\ufff3\001" +
    "\002\000\064\002\uffec\004\uffec\005\005\006\022\007\010" +
    "\011\uffec\012\uffec\013\uffec\014\uffec\015\025\016\035\017" +
    "\041\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec" +
    "\027\uffec\030\uffec\032\uffec\034\uffec\040\uffec\041\021\042" +
    "\uffec\001\002\000\064\002\uffe9\004\uffe9\005\005\006\022" +
    "\007\010\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9" +
    "\025\uffe9\027\uffe9\030\uffe9\032\uffe9\034\uffe9\040\uffe9\041" +
    "\021\042\uffe9\001\002\000\064\002\ufff1\004\ufff1\005\005" +
    "\006\022\007\010\011\043\012\027\013\045\014\036\015" +
    "\025\016\035\017\041\020\ufff1\021\ufff1\022\ufff1\023\ufff1" +
    "\024\ufff1\025\ufff1\027\ufff1\030\ufff1\032\ufff1\034\ufff1\040" +
    "\ufff1\041\021\042\ufff1\001\002\000\064\002\uffef\004\uffef" +
    "\005\005\006\022\007\010\011\043\012\027\013\045\014" +
    "\036\015\025\016\035\017\041\020\uffef\021\uffef\022\uffef" +
    "\023\uffef\024\uffef\025\uffef\027\uffef\030\uffef\032\uffef\034" +
    "\uffef\040\uffef\041\021\042\uffef\001\002\000\064\002\ufff4" +
    "\004\ufff4\005\005\006\022\007\010\011\043\012\027\013" +
    "\045\014\036\015\025\016\035\017\041\020\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\024\ufff4\025\ufff4\027\ufff4\030\ufff4\032" +
    "\ufff4\034\ufff4\040\ufff4\041\021\042\ufff4\001\002\000\064" +
    "\002\ufff0\004\ufff0\005\005\006\022\007\010\011\043\012" +
    "\027\013\045\014\036\015\025\016\035\017\041\020\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\027\ufff0\030" +
    "\ufff0\032\ufff0\034\ufff0\040\ufff0\041\021\042\ufff0\001\002" +
    "\000\064\002\ufff6\004\ufff6\005\005\006\022\007\010\011" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\015\025\016\035\017\041" +
    "\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\027" +
    "\ufff6\030\ufff6\032\ufff6\034\ufff6\040\ufff6\041\021\042\ufff6" +
    "\001\002\000\064\002\uffe1\004\uffe1\005\005\006\022\007" +
    "\010\011\043\012\027\013\045\014\036\015\025\016\035" +
    "\017\041\020\032\021\037\022\030\023\033\024\046\025" +
    "\034\027\uffe1\030\uffe1\032\uffe1\034\040\040\026\041\021" +
    "\042\uffe1\001\002\000\064\002\uffea\004\uffea\005\005\006" +
    "\022\007\010\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024" +
    "\uffea\025\uffea\027\uffea\030\uffea\032\uffea\034\uffea\040\uffea" +
    "\041\021\042\uffea\001\002\000\004\007\116\001\002\000" +
    "\004\020\111\001\002\000\004\007\077\001\002\000\006" +
    "\034\102\042\103\001\002\000\004\034\100\001\002\000" +
    "\004\007\101\001\002\000\006\034\uffd6\042\uffd6\001\002" +
    "\000\004\007\110\001\002\000\004\020\104\001\002\000" +
    "\032\003\014\004\011\005\005\006\022\007\010\010\016" +
    "\011\004\013\007\026\013\031\020\035\015\041\021\001" +
    "\002\000\054\004\011\005\005\006\022\007\010\011\043" +
    "\012\027\013\045\014\036\015\025\016\035\017\041\020" +
    "\032\021\037\022\030\023\033\024\046\025\034\032\106" +
    "\034\040\040\026\041\021\001\002\000\032\003\014\004" +
    "\011\005\005\006\022\007\010\010\016\011\004\013\007" +
    "\026\013\031\020\035\015\041\021\001\002\000\064\002" +
    "\uffe3\004\011\005\005\006\022\007\010\011\043\012\027" +
    "\013\045\014\036\015\025\016\035\017\041\020\032\021" +
    "\037\022\030\023\033\024\046\025\034\027\uffe3\030\uffe3" +
    "\032\uffe3\034\040\040\026\041\021\042\uffe3\001\002\000" +
    "\006\034\uffd7\042\uffd7\001\002\000\032\003\014\004\011" +
    "\005\005\006\022\007\010\010\016\011\004\013\007\026" +
    "\013\031\020\035\015\041\021\001\002\000\054\004\011" +
    "\005\005\006\022\007\010\011\043\012\027\013\045\014" +
    "\036\015\025\016\035\017\041\020\032\021\037\022\030" +
    "\023\033\024\046\025\034\032\113\034\040\040\026\041" +
    "\021\001\002\000\032\003\014\004\011\005\005\006\022" +
    "\007\010\010\016\011\004\013\007\026\013\031\020\035" +
    "\015\041\021\001\002\000\064\002\uffe7\004\uffe7\005\005" +
    "\006\022\007\010\011\043\012\027\013\045\014\036\015" +
    "\025\016\035\017\041\020\032\021\037\022\030\023\033" +
    "\024\046\025\034\027\uffe7\030\uffe7\032\uffe7\034\040\040" +
    "\026\041\021\042\uffe7\001\002\000\004\032\124\001\002" +
    "\000\004\007\117\001\002\000\006\007\117\020\uffdc\001" +
    "\002\000\004\020\121\001\002\000\032\003\014\004\011" +
    "\005\005\006\022\007\010\010\016\011\004\013\007\026" +
    "\013\031\020\035\015\041\021\001\002\000\054\004\011" +
    "\005\005\006\022\007\010\011\043\012\027\013\045\014" +
    "\036\015\025\016\035\017\041\020\032\021\037\022\030" +
    "\023\033\024\046\025\034\032\uffde\034\040\040\026\041" +
    "\021\001\002\000\004\020\uffdd\001\002\000\032\003\014" +
    "\004\011\005\005\006\022\007\010\010\016\011\004\013" +
    "\007\026\013\031\020\035\015\041\021\001\002\000\064" +
    "\002\uffe6\004\uffe6\005\005\006\022\007\010\011\043\012" +
    "\027\013\045\014\036\015\025\016\035\017\041\020\032" +
    "\021\037\022\030\023\033\024\046\025\034\027\uffe6\030" +
    "\uffe6\032\uffe6\034\040\040\026\041\021\042\uffe6\001\002" +
    "\000\004\041\127\001\002\000\032\003\014\004\011\005" +
    "\005\006\022\007\010\010\016\011\004\013\007\026\013" +
    "\031\020\035\015\041\021\001\002\000\054\004\011\005" +
    "\005\006\022\007\010\011\043\012\027\013\045\014\036" +
    "\015\025\016\035\017\041\020\032\021\037\022\030\023" +
    "\033\024\046\025\034\034\040\040\026\041\021\042\131" +
    "\001\002\000\070\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa" +
    "\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025" +
    "\ufffa\027\ufffa\030\ufffa\032\ufffa\034\ufffa\036\ufffa\037\132" +
    "\040\ufffa\041\ufffa\042\ufffa\001\002\000\032\003\014\004" +
    "\011\005\005\006\022\007\010\010\016\011\004\013\007" +
    "\026\013\031\020\035\015\041\021\001\002\000\064\002" +
    "\uffe2\004\uffe2\005\005\006\022\007\010\011\043\012\027" +
    "\013\045\014\036\015\025\016\035\017\041\020\032\021" +
    "\037\022\030\023\033\024\046\025\034\027\uffe2\030\uffe2" +
    "\032\uffe2\034\040\040\uffe2\041\021\042\uffe2\001\002\000" +
    "\064\002\ufff8\004\ufff8\005\005\006\022\007\010\011\ufff8" +
    "\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020" +
    "\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\027\ufff8" +
    "\030\ufff8\032\ufff8\034\ufff8\040\ufff8\041\021\042\ufff8\001" +
    "\002\000\016\004\011\005\005\006\022\007\010\036\051" +
    "\041\021\001\002\000\066\002\uffe0\004\uffe0\005\uffe0\006" +
    "\uffe0\007\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\027\uffe0\030\uffe0\032\uffe0\034\uffe0\036\051" +
    "\040\uffe0\041\uffe0\042\uffe0\001\002\000\054\004\011\005" +
    "\005\006\022\007\010\011\043\012\027\013\045\014\036" +
    "\015\025\016\035\017\041\020\032\021\037\022\030\023" +
    "\033\024\046\025\034\027\140\034\040\040\026\041\021" +
    "\001\002\000\032\003\014\004\011\005\005\006\022\007" +
    "\010\010\016\011\004\013\007\026\013\031\020\035\015" +
    "\041\021\001\002\000\054\004\011\005\005\006\022\007" +
    "\010\011\043\012\027\013\045\014\036\015\025\016\035" +
    "\017\041\020\032\021\037\022\030\023\033\024\046\025" +
    "\034\030\142\034\040\040\026\041\021\001\002\000\032" +
    "\003\014\004\011\005\005\006\022\007\010\010\016\011" +
    "\004\013\007\026\013\031\020\035\015\041\021\001\002" +
    "\000\064\002\uffee\004\uffee\005\005\006\022\007\010\011" +
    "\043\012\027\013\045\014\036\015\025\016\035\017\041" +
    "\020\032\021\037\022\030\023\033\024\046\025\034\027" +
    "\uffee\030\uffee\032\uffee\034\040\040\uffee\041\021\042\uffee" +
    "\001\002\000\004\002\001\001\002\000\064\002\uffed\004" +
    "\uffed\005\005\006\022\007\010\011\uffed\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\025\uffed\027\uffed\030\uffed\032\uffed" +
    "\034\uffed\040\uffed\041\021\042\uffed\001\002\000\032\003" +
    "\014\004\011\005\005\006\022\007\010\010\016\011\004" +
    "\013\007\026\013\031\020\035\015\041\021\001\002\000" +
    "\064\002\uffd9\004\uffd9\005\005\006\022\007\010\011\043" +
    "\012\027\013\045\014\036\015\025\016\035\017\041\020" +
    "\032\021\037\022\030\023\033\024\046\025\034\027\uffd9" +
    "\030\uffd9\032\uffd9\034\uffd9\040\uffd9\041\021\042\uffd9\001" +
    "\002\000\064\002\ufff7\004\ufff7\005\005\006\022\007\010" +
    "\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7" +
    "\027\ufff7\030\ufff7\032\ufff7\034\ufff7\040\ufff7\041\021\042" +
    "\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\010\002\005\007\016\010\011\001\001\000" +
    "\010\002\005\007\016\010\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\005\007\016\010\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\041" +
    "\007\043\001\001\000\010\002\005\007\016\010\136\001" +
    "\001\000\002\001\001\000\004\007\134\001\001\000\010" +
    "\002\005\007\016\010\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\005\007\016\010\022\001\001" +
    "\000\002\001\001\000\006\003\041\007\043\001\001\000" +
    "\002\001\001\000\010\002\005\007\016\010\071\001\001" +
    "\000\010\002\005\007\016\010\070\001\001\000\010\002" +
    "\005\007\016\010\067\001\001\000\010\002\005\007\016" +
    "\010\066\001\001\000\002\001\001\000\010\002\005\007" +
    "\016\010\065\001\001\000\010\002\005\007\016\010\064" +
    "\001\001\000\010\002\005\007\016\010\063\001\001\000" +
    "\010\002\005\007\016\010\062\001\001\000\010\002\005" +
    "\007\016\010\061\001\001\000\010\002\005\007\016\010" +
    "\060\001\001\000\010\002\005\007\016\010\057\001\001" +
    "\000\010\002\005\007\016\010\056\001\001\000\004\007" +
    "\055\001\001\000\010\002\005\007\016\010\054\001\001" +
    "\000\002\001\001\000\010\002\005\007\016\010\047\001" +
    "\001\000\010\002\005\007\016\010\046\001\001\000\006" +
    "\003\041\007\043\001\001\000\006\003\041\007\043\001" +
    "\001\000\002\001\001\000\010\002\005\007\016\010\052" +
    "\001\001\000\006\003\041\007\043\001\001\000\002\001" +
    "\001\000\006\003\041\007\043\001\001\000\002\001\001" +
    "\000\006\003\041\007\043\001\001\000\006\003\041\007" +
    "\043\001\001\000\006\003\041\007\043\001\001\000\006" +
    "\003\041\007\043\001\001\000\006\003\041\007\043\001" +
    "\001\000\006\003\041\007\043\001\001\000\006\003\041" +
    "\007\043\001\001\000\006\003\041\007\043\001\001\000" +
    "\006\003\041\007\043\001\001\000\006\003\041\007\043" +
    "\001\001\000\006\003\041\007\043\001\001\000\006\003" +
    "\041\007\043\001\001\000\004\006\114\001\001\000\002" +
    "\001\001\000\004\005\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\005\007\016\010" +
    "\104\001\001\000\006\003\041\007\043\001\001\000\010" +
    "\002\005\007\016\010\106\001\001\000\006\003\041\007" +
    "\043\001\001\000\002\001\001\000\010\002\005\007\016" +
    "\010\111\001\001\000\006\003\041\007\043\001\001\000" +
    "\010\002\005\007\016\010\113\001\001\000\006\003\041" +
    "\007\043\001\001\000\002\001\001\000\004\004\117\001" +
    "\001\000\004\004\122\001\001\000\002\001\001\000\010" +
    "\002\005\007\016\010\121\001\001\000\006\003\041\007" +
    "\043\001\001\000\002\001\001\000\010\002\005\007\016" +
    "\010\124\001\001\000\006\003\041\007\043\001\001\000" +
    "\002\001\001\000\010\002\005\007\016\010\127\001\001" +
    "\000\006\003\041\007\043\001\001\000\002\001\001\000" +
    "\010\002\005\007\016\010\132\001\001\000\006\003\041" +
    "\007\043\001\001\000\006\003\041\007\043\001\001\000" +
    "\004\007\135\001\001\000\002\001\001\000\006\003\041" +
    "\007\043\001\001\000\010\002\005\007\016\010\140\001" +
    "\001\000\006\003\041\007\043\001\001\000\010\002\005" +
    "\007\016\010\142\001\001\000\006\003\041\007\043\001" +
    "\001\000\002\001\001\000\006\003\041\007\043\001\001" +
    "\000\010\002\005\007\016\010\146\001\001\000\006\003" +
    "\041\007\043\001\001\000\006\003\041\007\043\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return l.next_token(); 
    }


    Lexer l;
    Parser(Lexer l){
	   this.l = l;
    }

    class Pair<A,B> {
        A left;
        B right;

        Pair(A left, B right) {
            this.left = left;
            this.right = right;
        }
    }

    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= exp EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // simple_exp ::= LPAREN exp RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // simple_exp ::= LPAREN RPAREN 
            {
              Exp RESULT =null;
		 RESULT = new Unit(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // simple_exp ::= BOOL 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		boolean b = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Bool(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // simple_exp ::= INT 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int i = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Int(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // simple_exp ::= FLOAT 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		float f = (float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Float(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // simple_exp ::= IDENT 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Var(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // simple_exp ::= simple_exp DOT LPAREN exp RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Get(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp ::= simple_exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp ::= NOT exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Not(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= MINUS exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    if (e instanceof Float) {
        RESULT = new Float(-((Float) e).f);
    } else {
        RESULT = new Neg(e);
    }
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= exp PLUS exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Add(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= exp MINUS exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sub(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= exp EQUAL exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Eq(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= exp LESS_GREATER exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Not(new Eq(e1, e2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= exp LESS exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Not(new LE(e2, e1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= exp GREATER exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Not(new LE(e1, e2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp LESS_EQUAL exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LE(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= exp GREATER_EQUAL exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LE(e2, e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= IF exp THEN exp ELSE exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(e1, e2, e3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= MINUS_DOT exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FNeg(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= exp PLUS_DOT exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FAdd(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= exp MINUS_DOT exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FSub(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= exp AST_DOT exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FMul(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= exp AST exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Mul(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= exp SLASH_DOT exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FDiv(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= LET IDENT EQUAL exp IN exp 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Let(id, Type.gen(), e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= LET REC fundef IN exp 
            {
              Exp RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		FunDef fd = (FunDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LetRec(fd,  e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= exp actual_args 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Exp> es = (List<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new App(e, es); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= elems 
            {
              Exp RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Exp> es = (List<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Tuple(es); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= LET LPAREN pat RPAREN EQUAL exp IN exp 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Pair<List<Id>,List<Type>> p = (Pair<List<Id>,List<Type>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
       RESULT = new LetTuple(p.left, p.right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= simple_exp DOT LPAREN exp RPAREN LESS_MINUS exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Put(e1, e2, e3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= exp SEMICOLON exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Let(Id.gen(), new TUnit(), e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= ARRAY_CREATE simple_exp simple_exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Array(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= error 
            {
              Exp RESULT =null;
		 RESULT = null; /* TODO */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // fundef ::= IDENT formal_args EQUAL exp 
            {
              FunDef RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Id name = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Id> args = (List<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunDef(name, null, args, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fundef",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // formal_args ::= IDENT formal_args 
            {
              List<Id> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Id> args = (List<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 args.add(0, id); RESULT = args; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_args",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // formal_args ::= IDENT 
            {
              List<Id> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List l = new LinkedList<Id>(); 
      l.add(0, id); 
      RESULT = l; 
   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_args",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // actual_args ::= actual_args simple_exp 
            {
              List<Exp> RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Exp> es = (List<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 es.add(e); RESULT = es; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_args",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // actual_args ::= simple_exp 
            {
              List<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List l = new LinkedList<Exp>(); l.add(0, e); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_args",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // elems ::= elems COMMA exp 
            {
              List<Exp> RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Exp> es = (List<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 es.add(e); RESULT = es; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elems",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // elems ::= exp COMMA exp 
            {
              List<Exp> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List l = new LinkedList<Exp>(); 
       l.add(0, e2); 
       l.add(0, e1);
       RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elems",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // pat ::= pat COMMA IDENT 
            {
              Pair<List<Id>,List<Type>> RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pair<List<Id>,List<Type>> is = (Pair<List<Id>,List<Type>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 is.left.add(i); RESULT = is; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // pat ::= IDENT COMMA IDENT 
            {
              Pair<List<Id>,List<Type>> RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Id i1 = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Id i2 = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<Id> l = new LinkedList<Id>(); 
        List<Type> t = new LinkedList<Type>(); 
        t.add(0, Type.gen()); t.add(0, Type.gen());
        l.add(0, i2); 
        l.add(0, i1); RESULT = new Pair<List<Id>, List<Type>>(l, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
